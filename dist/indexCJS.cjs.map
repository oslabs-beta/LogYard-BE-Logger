{"mappings":"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","sources":["index.js","transport.js"],"sourcesContent":["import logger from './transport';\n\nexport const logyard = (level, msg, Context = {}) => {\n  for (const key in Context) {\n    if (typeof Context[key] === 'object') {\n      Context[key] = 'INVALID CONTEXT';\n    }\n  }\n  \n  if (level === 'error') logger.error(msg, {Context})  \n  else if (level === 'warn') logger.warn(msg, {Context})\n  else if (level === 'info') logger.info(msg, {Context})\n  else if (level === 'http') logger.http(msg, {Context})\n  else if (level === 'verbose') logger.verbose(msg, {Context})\n  else if (level === 'debug') logger.debug(msg, {Context})\n  else if (level === 'silly') logger.silly(msg, {Context})\n  else console.log('Invalid Level Input');\n}\n\n/*\nSteps to using Express Logger:\n\n1. Add app.use(addLoggerExp('key', 'value')) -> This adds a key value pair to the context object. Can also be invoked with no args\n2. Add addContextExp('key', 'value') to a middleware chain. -> This adds another key value pair to the context object. Can be done as many times as necessary.\n3. Add createLogExp('level', 'message') to a middleware chain. -> This is what sends the log to the database\n4. (optional) Add removeContextExp('key') to a middleware chain. -> This removes a key value pair from the context object, and should only be used after an addContextExp.\n\n*/\n\nexport function addContextExp(key, value){\n  return (req, res, next)=>{\n    try {\n      res.locals.logger.context[key] = value;\n    return next();\n    } catch (e) {\n        return next({log: `addContextExp ERROR: ${e}`,\n        status: e.status || 500,\n        message: {\n          err: 'Error with addContextExp',\n          },\n        });\n    }\n  };\n};\n\nexport function addLoggerExp(key, value) {\n  return (req, res, next)=>{\n    try {\n      if (!key || !value){\n        res.locals.logger = {\n          context: {},\n          log: logyard\n        };\n        return next();\n      }\n      res.locals.logger = {\n        context: { [key]: value },\n        log: logyard\n      };\n\n      return next();\n    } catch (e) {\n        return next({log: `addLoggerExp ERROR: ${e}`,\n        status: e.status || 500,\n        message: {\n          err: 'Error with addLoggerExp',\n          },\n        });\n    }\n  };\n};\n\nexport function createLogExp (level, message) {\n  return (req, res, next) => {\n    try {\n      const context = res.locals.logger.context;\n    res.locals.logger.log(level, message, context);\n    } catch (e) {\n      return next({log: `createLogExp ERROR: ${e}`,\n        status: e.status || 500,\n        message: {\n          err: 'Error with createLogExp',\n          },\n        });\n    }\n    \n    next();\n  };\n};\n\nexport function removeContextExp (key) {\n  return (req, res, next)=>{\n    try {\n          delete res.locals.logger.context[key];\n\n          return next();\n    } catch (e) {\n      return next({log: `removeContextExp ERROR: ${e}`,\n        status: e.status || 500,\n        message: {\n          err: 'Error with removeContextExp',\n          },\n        });\n    }\n  };\n};","import { createLogger, format, transports }  from 'winston';\nimport 'winston-mongodb';\nimport config from 'config';\n\n\n\nconst uri = config.get('uri');\nconst level = config.get('level');\nconst dbName = config.get('dbName');\n\nexport default createLogger({\n  transports: [\n    /* !LOGGER TEMPLATE!\n\n    _id: AUTO GENERATED\n    timestamp: AUTO GENERATED\n    level: USER DECLARED ( (0)error, (1)warn, (2)info, (3)http, (4)verbose, (5)debug, (6)silly )\n    message: USER DECLARED\n    meta: {\n      Context1: USER DECLARED\n      Context2: USER DECLARED\n    }\n\n    */\n\n    new transports.MongoDB({\n      // to collect all level types in DB, put this as 'silly'. Anything at or below the indicated level here will be placed in the database.\n      level,\n      db: uri,\n      options: {\n        useUnifiedTopology: true,\n      },\n      // dbName and collection MUST match the location at which the mongo server is pointing to in db.js!\n      dbName: `${dbName || 'LogYard'}`,\n      collection: 'logs',\n      format: format.combine(\n        format.json(),\n        format.metadata()\n      )\n    })\n  ]\n});"],"names":[],"version":3,"file":"indexCJS.cjs.map"}